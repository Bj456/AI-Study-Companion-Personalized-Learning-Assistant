import openai
import streamlit as st

# ‚úÖ Load your OpenRouter API key securely
openai.api_key = st.secrets["OPENROUTER_API_KEY"]
openai.base_url = "https://openrouter.ai/api/v1"

def get_personalized_answer(question, mbti, learning_style, language="en"):
    # üß† Build the prompt dynamically
    if language == "hi":
        prompt = f"""
        ‡§Ü‡§™ ‡§è‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§õ‡§æ‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•Ä MBTI ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§î‡§∞ ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡•Ä ‡§∂‡•à‡§≤‡•Ä ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§§‡•á ‡§π‡•à‡§Ç‡•§
        ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•Ä MBTI ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§π‡•à {mbti} ‡§î‡§∞ ‡§â‡§∏‡§ï‡•Ä ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡•Ä ‡§∂‡•à‡§≤‡•Ä ‡§π‡•à {learning_style}‡•§
        ‡§á‡§∏ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§õ‡§æ‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§∏‡•ç‡§§‡§∞ ‡§™‡§∞, ‡§Ü‡§∏‡§æ‡§® ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§¶‡•á‡§Ç:
        {question}
        """
    else:
        prompt = f"""
        You are an expert teacher who adapts explanations according to the student's MBTI type and learning style.
        The student's MBTI is {mbti}, and their learning style is {learning_style}.
        Give a detailed, easy-to-understand answer for the question:
        {question}
        """

    # üöÄ Make the API request
    try:
        response = openai.chat.completions.create(
            model="openai/gpt-4o-mini",  # change model as needed
            messages=[
                {"role": "system", "content": "You are a helpful AI study assistant."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.7,
        )

        # ‚úÖ Universal extractor (handles different API formats)
        if hasattr(response.choices[0], "message"):
            return response.choices[0].message.get("content", "")
        elif hasattr(response.choices[0], "text"):
            return response.choices[0].text
        else:
            # fallback for newer SDK structures
            return response.choices[0].get("message", {}).get("content", "")

    except Exception as e:
        st.error("‚ö†Ô∏è Error while fetching response:")
        st.write(str(e))
        st.write("Raw API response:", response if "response" in locals() else "No response returned")
        return "Sorry, something went wrong while generating the answer. Please try again."
